#!/bin/sh

# optionally sources one file (if exists)
source_opt_file() {
  if [ -f "$1" ]; then
    . "$1"
  fi
}

swap() {
  if [ -z "${1+x}" ] || [ -z "${2+x}" ]; then
    printf 'one or more variables not defined. Usage: swap "file1" "file2"\n';
    return 1;
  fi
  if [ "$1" = "$2" ];then
    # FIXME: verify file exists
    return 0
  fi
  tmpfile=$(mktemp --dry-run "$(dirname "$1")/XXXXXX")
  mv "$1" "$tmpfile" && mv "$2" "$1" &&  mv "$tmpfile" "$2"
}

up() {
  if [ "$1" -eq "$1" ] 2> /dev/null ; then
    x=0
    dir=""
    while [ $x -lt "${1:-1}" ]; do
      dir=${dir}../
      x=$((x+1))
    done
    cd "$dir" || exit "unable to cd"
  else
    print "Usage: up <integer>"
  fi
}

# defines an alias if it does not already exist
define_alias_ifndef() {
#! type $1  > /dev/null 2>&1 && alias $1="$2"
# othervise (more verbose):
  if ! command -v "$1"  > /dev/null 2>&1; then
    alias "$1"="$2";
  fi
}

#like normal alias, but checks if the required program is avaiable
define_alias_opt() {
  if command -v "$1" > /dev/null 2>&1; then
    alias "$2"="$3";
  fi
}

# remove all duplicates from path
# FIXME: on windows we should be case insensitive and normalize (windows/unix path) all paths
# since : is present on windows as path separator, we have a problem...
rem_dup_from_path(){
  if [ -n "$PATH" ]; then
    old_PATH=$PATH:;
    while [ -n "$old_PATH" ]; do
      x=${old_PATH%%:*}       # the first remaining entry
      case $PATH: in
        *:"$x":*) ;;       # already there
        *) PATH=$PATH:$x;; # not there yet
      esac
      old_PATH=${old_PATH#*:}
    done
    PATH=${PATH#:}
    unset old_PATH x
  fi
}


# checks if dir exists and adds it to path if not already present
# fixme: on windows we should convert it to an unix path
append_to_path(){
  if [ -d "$1" ]; then
    case ":$PATH:" in
      *":$1:"*) :;; # already there, do not add it
      *) PATH="$PATH:$1";;
    esac
    return 0;
  fi
  return 1;
}

# repair permissions  of current directory (otherwise pass directory as parameter)
# intended for directories under the user home path
# FIXME: check if it works on windows
repair_dir_perm() {
  if [ -z "$1" ]; then
    DIRECTORY="."
  else
    DIRECTORY=$1
  fi
  find "$DIRECTORY" -type d -print0 | xargs -0 chmod 0775
  find "$DIRECTORY" -type f -print0 | xargs -0 chmod 0644
}

# sample: find_in_file "*.txt" hello
# globbing is your enemy here!
#FIXME: if directory matches pattern -> "error"
# try to apply: https://stackoverflow.com/questions/11456403/stop-shell-wildcard-character-expansion
find_in_file(){
  if [ -z "$2" ]; then
    NAME="*"
    CONTENT="$1"
  else
    NAME="$1"
    CONTENT="$2"
  fi
  find . -name "$NAME" -exec grep --with-filename --color -n --directories skip "$CONTENT" {} \;
}
#alias find_in_file='set -f;find_in_file;' # removes globbing completely, not just for this command!

print_color_support() {
  printf '\n'
  i=0
  while [ $((i+=1)) -le 255 ]
  do
    printf "\x1b[38;5;${i}m%03d " ${i}
  done
  printf '\n\n'

  printf 'COLORTERM: %s\n' "$COLORTERM"
  printf 'TERM:      %s\n' "$TERM"
#https://gist.github.com/XVilka/8346728
awk 'BEGIN{
    s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
        r = 255-(colnum*255/76);
        g = (colnum*510/76);
        b = (colnum*255/76);
        if (g>255) g = 510-g;
        printf "\033[48;2;%d;%d;%dm", r,g,b;
        printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
        printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
}'
}
